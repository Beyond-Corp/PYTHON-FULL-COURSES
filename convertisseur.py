
# print("Convertisseur de valeur")
# A = "A- Pouces vers Cm"
# B = "B- Cm vers Pouces"
# print(A)
# print(B)
#
#
# def convertisseur_de_valeurs_de_cm_en_pouces_vice_versa():
#     choix = ""
#     while choix != A and choix != B:
#         choix = input(f"Souhaitez vous convertir de {A} ou de {B} ? Choose between: A and B or q for Quit the programme:  ")
#         print("")
#
#         if choix == "A" or choix == "a":
#
#             while True:  # La boucle commence et continuera ind√©finiment
#                 try:
#                     A_valeur_str = (input("Enter the valor to convert: "))
#
#                     if A_valeur_str == "q" or A_valeur_str == "Q":
#                         exit("THANKS :)")
#                     A_valeur_int = int(A_valeur_str)
#                     A_valeur_float = float(A_valeur_int)
#                     convertion = round(A_valeur_float * 2.54, 2)
#                     print(f"{A_valeur_float} Pouces est {convertion} cm")
#                     break
#                 except ValueError:
#                     print("Please you should enter a number or q for Quit the programme: ")
#
#         elif choix == "B" or choix == "b":
#
#             while True:
#                 try:
#                     B_valeur_str = input("Enter the valor to convert: ")
#                     if B_valeur_str == "q" or B_valeur_str == "Q":
#                         quit("THANKS :)")
#                     B_valeur_float = float(B_valeur_str)
#                     convertion = round(B_valeur_float * 0.394, 3)
#                     print(f"{B_valeur_float} Cm est {convertion} Pouces")
#                     break
#                 except ValueError:
#                     print("Please you should enter a number or q for Quit the programme: ")
#
#         elif choix == "q":
#             quit("THANKS:)")
#
#         else:
#             print("Please you should enter a A or B")
#
#
# convertisseur_de_valeurs_de_cm_en_pouces_vice_versa()
#
#



# ========VERSION 2 ==========================================================================================================
print("Convertisseur de valeurs")
print("A - Pouces vers Cm")
print("B - Cm vers Pouces")


def convertir(valeur, facteur_conversion):
    """Convertit une valeur donn√©e en appliquant un facteur de conversion."""
    return round(valeur * facteur_conversion, 3)


def demander_valeur():
    """Demande √† l'utilisateur d'entrer une valeur et g√®re les erreurs."""
    while True:
        valeur = input("Entrez la valeur √† convertir (ou Q pour quitter) : ").strip().lower()
        if valeur == "q":
            print("Merci d'avoir utilis√© le convertisseur. √Ä bient√¥t !")
            exit()
        try:
            return float(valeur)
        except ValueError:
            print("Erreur : veuillez entrer un nombre valide ou Q pour quitter.")


def convertisseur_de_valeurs():
    while True:
        choix = input("\nChoisissez une option (A ou B, ou Q pour quitter) : ").strip().lower()

        if choix == "a":
            print("\nConversion : Pouces ‚Üí Cm")
            valeur = demander_valeur()
            resultat = convertir(valeur, 2.54)
            print(f"{valeur} pouces est √©gal √† {resultat} cm.")

        elif choix == "b":
            print("\nConversion : Cm ‚Üí Pouces")
            valeur = demander_valeur()
            resultat = convertir(valeur, 0.394)
            print(f"{valeur} cm est √©gal √† {resultat} pouces.")

        elif choix == "q":
            print("Merci d'avoir utilis√© le convertisseur. √Ä bient√¥t !")
            break  # sortie du while

        else:
            print("Veuillez choisir une option valide : A, B, ou Q.")


convertisseur_de_valeurs()



"""

Pour que tu puisses apprendre √† am√©liorer un code en te posant les bonnes questions, voici une s√©rie d‚Äôinterrogations 
que tu pourrais te poser lorsque tu analyses ou √©cris du code. Elles t‚Äôaident √† identifier les r√©p√©titions et 
√† cr√©er un code plus lisible, efficace et maintenable. üöÄ

1. Sur la logique g√©n√©rale :
Quelles parties de mon code se r√©p√®tent‚ÄØ?

Exemple : La logique de conversion entre A et B dans ton code √©tait presque identique.
Puis-je regrouper des blocs similaires en une seule fonction‚ÄØ?

Exemple : Les calculs (* 2.54 et * 0.394) pouvaient √™tre g√©r√©s par une fonction g√©n√©rique convertir().
Est-ce que mon code peut √™tre utilis√© pour d‚Äôautres cas similaires‚ÄØ?

Exemple : Avec une fonction comme convertir(), tu peux facilement ajouter de nouvelles conversions (exemple : miles ‚Üí km)
 sans copier-coller.
 
 
 
 
 
2. Sur la gestion des entr√©es :
Est-ce que je traite les erreurs utilisateur de fa√ßon uniforme‚ÄØ?

Exemple : Le code r√©p√©tait la gestion de l‚Äôentr√©e invalide dans les deux blocs. En centralisant 
cela dans demander_valeur(), tu simplifies le code.
Comment puis-je rendre la gestion des entr√©es plus intuitive‚ÄØ?

Exemple : En rendant l‚Äôentr√©e insensible √† la casse (lower()) et en g√©rant q partout, ton programme devient plus convivial.




3. Sur la modularit√© :
Est-ce que chaque partie de mon code a un objectif clair et unique‚ÄØ?

Exemple : Une fonction comme convertir() se concentre uniquement sur la conversion math√©matique, sans g√©rer l‚Äôaffichage
 ou l‚Äôentr√©e utilisateur.
Puis-je d√©couper mon code en fonctions r√©utilisables‚ÄØ?

Exemple : Les parties de ton code li√©es √† la gestion des erreurs et des conversions sont maintenant s√©par√©es.






4. Sur la lisibilit√© :
Mon code est-il facile √† comprendre pour une autre personne ou pour moi-m√™me plus tard‚ÄØ?

Exemple : En √©vitant les r√©p√©titions et en nommant les fonctions de mani√®re explicite (convertir, demander_valeur), 
ton code devient plus compr√©hensible.
Les noms de mes variables et fonctions d√©crivent-ils bien leur r√¥le‚ÄØ?

Exemple : Des noms comme convertir() ou demander_valeur() expliquent clairement ce que fait chaque partie.




5. Sur l‚Äôefficacit√© :
Est-ce que mon code est plus long ou plus complexe qu‚Äôil ne devrait l‚Äô√™tre‚ÄØ?

Exemple : Les deux boucles while pour A et B √©taient redondantes, mais elles ont √©t√© fusionn√©es dans une logique g√©n√©rique.
Puis-je r√©duire les calculs ou les √©tapes inutiles‚ÄØ?

Exemple : Dans ton code initial, tu convertissais une cha√Æne en int, puis en float. Une seule conversion en float suffit.





6. Sur la flexibilit√© :
Si je devais ajouter une nouvelle fonctionnalit√©, combien de changements seraient n√©cessaires‚ÄØ?

Exemple : Avec la version am√©lior√©e, ajouter une nouvelle conversion (ex. : Celsius ‚Üí Fahrenheit) ne n√©cessite que
 l‚Äôajout d‚Äôun nouveau choix et facteur.
Puis-je rendre mon code plus g√©n√©rique tout en restant simple‚ÄØ?

Exemple : En utilisant une fonction unique comme convertir(valeur, facteur_conversion), ton code devient g√©n√©rique 
tout en restant clair.




7. Sur l‚Äôexp√©rience utilisateur :
Est-ce que les messages que j‚Äôaffiche sont clairs et utiles‚ÄØ?

Exemple : Tu as ajout√© des messages comme "Entrez une valeur ou Q pour quitter", ce qui am√©liore l‚Äôinteraction.
Est-ce que mon programme r√©agit bien aux erreurs courantes de l‚Äôutilisateur‚ÄØ?

Exemple : La gestion des erreurs dans demander_valeur() garantit que ton programme ne plante pas si l‚Äôutilisateur entre
 autre chose qu‚Äôun nombre.
En te posant ces questions r√©guli√®rement, tu d√©veloppes une fa√ßon de penser structur√©e pour identifier les r√©p√©titions 
et am√©liorer ton code. Avec la pratique, cela deviendra une seconde nature‚ÄØ! üòä




"""